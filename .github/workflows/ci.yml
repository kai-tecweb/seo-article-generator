name: SEO記事生成システム CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Next.js プロジェクトのテスト（現在の構成）
  test-nextjs:
    runs-on: ubuntu-latest
    name: Next.js Testing
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript check
      run: npm run type-check
      continue-on-error: true

    - name: Run ESLint
      run: npm run lint
      continue-on-error: true

    - name: Build project
      run: npm run build

    - name: Run tests
      run: npm test
      continue-on-error: true

  # Laravel プロジェクトのテスト（将来の構成）
  test-laravel:
    runs-on: ubuntu-latest
    name: Laravel Testing (Future)
    if: false # 現在は無効化、Laravel移行時に有効化
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, dom, fileinfo, mysql, redis
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader --no-dev

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Create .env file
      run: |
        cp .env.example .env
        php artisan key:generate

    - name: Configure Laravel
      run: |
        php artisan config:cache
        php artisan route:cache

    - name: Set directory permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Run database migrations
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password
        REDIS_HOST: 127.0.0.1
        REDIS_PORT: 6379
      run: php artisan migrate --force

    - name: Run Laravel Pint (Code formatting)
      run: ./vendor/bin/pint --test

    - name: Run PHPStan (Static analysis)
      run: ./vendor/bin/phpstan analyse

    - name: Run PHPUnit tests
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password
        REDIS_HOST: 127.0.0.1
        REDIS_PORT: 6379
      run: php artisan test --coverage

  # セキュリティスキャン
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 依存関係チェック
  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Run npm audit
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: Check for outdated packages
      run: npm outdated
      continue-on-error: true

  # デプロイメント（mainブランチのみ）
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test-nextjs, security-scan, dependency-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build

    - name: Deploy notification
      run: |
        echo "🚀 デプロイメント準備完了"
        echo "ビルドが正常に完了しました"
        # 実際のデプロイ処理はここに追加
